app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: https://${BASE_URL}


integrations:
  #github:
  #  - host: github.com
    # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
    # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
    #  token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}
  gitlab:
    - host: ${GITLAB_HOST}
      apiBaseUrl: https://${GITLAB_HOST}/api/v4
      token: ${GITLAB_TOKEN}
      baseUrl: https://${GITLAB_HOST}
 
auth:
  providers:
    gitlab:
      development:
        clientId: ${AUTH_GITLAB_CLIENT_ID}
        clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
        audience: https://${GITLAB_HOST}
        callbackUrl: https://${BASE_URL}/api/auth/gitlab/handler/frame

sonarqube:
  baseUrl: ${SONAR_URL}
  apiKey: ${SONAR_TOKEN}

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: https://${BASE_URL}
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'
  cors:
    origin: 
    - https://${BASE_URL}
    - https://${GITLAB_HOST}
    - ${SONAR_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE, OPTIONS]
    credentials: true
  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
    pluginDivisionMode: schema
    prefix: 'backstage_dev_'
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  providers:
    gitlab:
      gitlabcorp:
        host: ${GITLAB_HOST}
        branch: master
        fallbackBranch: main
        skipForkedRepos: true
        group: unj
        entityFilename: catalog-info.yaml
  rules:
    - allow:
        - Component
        - API
        - Resource
        - System
        - Domain
        - Location
        - Template
  # Overrides the default list locations from app-config.yaml as these contain example data.
  # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
  # on how to get entities into the catalog.
  locations: []
